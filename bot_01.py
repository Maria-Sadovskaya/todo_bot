import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)
import db
import os

with open('token') as f:
    TOKEN = f.readline().strip()
    WEATHER_API_KEY = f.readlines()[0]
WEATHER_API_URL = "http://api.weatherapi.com/v1/current.json"


# ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    await update.message.reply_text(
        "üìù *To-Do Bot*\n\n"
        "–î–æ–±–∞–≤–ª—è–π –∑–∞–¥–∞—á–∏, —Å—Ç–∞–≤—å –¥–µ–¥–ª–∞–π–Ω—ã –∏ –æ—Ç–º–µ—á–∞–π –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É (–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)\n"
        "/list - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–µ–ª\n"
        "/weather - —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É\n"
        "/help - —Å–ø—Ä–∞–≤–∫–∞",
        parse_mode="Markdown"
    )


async def add_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏."""
    user_id = update.message.from_user.id
    task_text = " ".join(context.args) if context.args else None

    if task_text:
        # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Å—Ä–∞–∑—É —Å –∫–æ–º–∞–Ω–¥–æ–π
        await process_task(update, context, user_id, task_text)
    else:
        # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        await update.message.reply_text("üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∑–∞–¥–∞—á—É —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:")
        context.user_data["waiting_for_task"] = True


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user_id = update.message.from_user.id
    text = update.message.text

    # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –∑–∞–¥–∞—á—É –ø–æ—Å–ª–µ /add
    if context.user_data.get("waiting_for_task"):
        await process_task(update, context, user_id, text)
        context.user_data["waiting_for_task"] = False
        return

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (done/delete) –∏ –≤–≤–µ–¥–µ–Ω –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏
    if "action" in context.user_data:
        action = context.user_data.get("action")
        task_number = text.strip()

        if not task_number.isdigit():
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ (—Ü–∏—Ñ—Ä—É)!")
            return

        task_id = int(task_number)
        tasks = db.get_tasks(user_id)
        task_nums = len(tasks) + 1

        if task_id > task_nums or task_id < 0:
            await update.message.reply_text("‚ùå –¢–∞–∫–æ–π –∑–∞–¥–∞—á–∏ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ!")
            return

        if action == "done":
            db.mark_task_done(task_id)
            await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
            return
        elif action == "delete":
            db.delete_task(task_id)
            await update.message.reply_text(f"üóë –ó–∞–¥–∞—á–∞ {task_id} —É–¥–∞–ª–µ–Ω–∞!")
            return

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ
    await update.message.reply_text("‚Ñπ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º (/start –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥)")


async def process_task(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int, task_text: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –ë–î."""
    # –ü–∞—Ä—Å–∏–Ω–≥ –¥–µ–¥–ª–∞–π–Ω–∞ (–ø—Ä–∏–º–µ—Ä: "–∑–∞–¥–∞—á–∞ --–∑–∞–≤—Ç—Ä–∞ 18:00")
    deadline = None
    if "--" in task_text:
        task_text, deadline_part = task_text.split("--", 1)
        deadline = deadline_part.strip()

    db.add_task(user_id, task_text.strip(), deadline)
    await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: *{task_text.strip()}*", parse_mode="Markdown")


async def list_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á."""
    user_id = update.message.from_user.id
    tasks = db.get_tasks(user_id)

    if not tasks:
        await update.message.reply_text("üì≠ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç!")
        return

    tasks_text = "üìã *–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:*\n\n"
    for i in range(len(tasks)):
        task_id, task_text, deadline, is_done = tasks[i]
        status = "‚úì" if is_done else "‚óª"
        deadline_str = f" (–¥–æ {deadline})" if deadline else ""
        tasks_text += f"{status} {i + 1}. {task_text}{deadline_str}\n"

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
    keyboard = [
        [InlineKeyboardButton("‚úî –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º", callback_data="done")],
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="delete")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(tasks_text, reply_markup=reply_markup)


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ (–≤—ã–ø–æ–ª–Ω–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å)."""
    query = update.callback_query
    await query.answer()

    if query.data == "done":
        await query.edit_message_text("–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '1'):")
        context.user_data["action"] = "done"
    elif query.data == "delete":
        await query.edit_message_text("–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '1'):")
        context.user_data["action"] = "delete"


async def handle_task_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞—á–∏."""
    user_id = update.message.from_user.id
    action = context.user_data.get("action")
    task_number = update.message.text.strip()

    if not task_number.isdigit():
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ (—Ü–∏—Ñ—Ä—É)!")
        return

    task_id = int(task_number)
    tasks = db.get_tasks(user_id)
    task_ids = [task[0] for task in tasks]
    task_nums = len(tasks) + 1

    if task_id > task_nums or task_id < 0:
        await update.message.reply_text("‚ùå –¢–∞–∫–æ–π –∑–∞–¥–∞—á–∏ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ!")
        return

    if action == "done":
        db.mark_task_done(task_id)
        await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
    elif action == "delete":
        db.delete_task(task_id)
        await update.message.reply_text(f"üóë –ó–∞–¥–∞—á–∞ {task_id} —É–¥–∞–ª–µ–Ω–∞!")


async def get_weather(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≥–æ—Ä–æ–¥—É."""
    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥. –ù–∞–ø—Ä–∏–º–µ—Ä: /weather –ú–æ—Å–∫–≤–∞")
        return

    location = " ".join(context.args)

    try:
        # –ó–∞–ø—Ä–æ—Å –∫ API –ø–æ–≥–æ–¥—ã
        params = {
            "key": WEATHER_API_KEY,
            "q": location,
            "lang": "ru"
        }
        response = requests.get(WEATHER_API_URL, params=params)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP

        data = response.json()

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
        current = data["current"]
        location_data = data["location"]

        weather_info = (
            f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {location_data['name']}, {location_data['country']}:\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {current['temp_c']}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {current['feelslike_c']}¬∞C)\n"
            f"‚òÅ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {current['condition']['text']}\n"
            f"üí® –í–µ—Ç–µ—Ä: {current['wind_kph']} –∫–º/—á, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {current['wind_dir']}\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {current['humidity']}%\n"
            f"üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {current['last_updated']}"
        )

        await update.message.reply_text(weather_info)

    except requests.exceptions.RequestException as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã: {e}")
    except KeyError:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""
    help_text = (
        "üìù *To-Do Bot - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º*\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/add [–∑–∞–¥–∞—á–∞] - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É (–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)\n"
        "   –ü—Ä–∏–º–µ—Ä: /add –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ --–∑–∞–≤—Ç—Ä–∞ 18:00\n"
        "/list - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á\n"
        "/weather [–≥–æ—Ä–æ–¥] - —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ\n"
        "\n"
        "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∑–∞–¥–∞—á–∞–º–∏:\n"
        "1. –î–æ–±–∞–≤—å—Ç–µ –∑–∞–¥–∞—á—É –∫–æ–º–∞–Ω–¥–æ–π /add\n"
        "2. –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∫–æ–º–∞–Ω–¥–æ–π /list\n"
        "3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è\n"
        "\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –¥–µ–¥–ª–∞–π–Ω –¥–ª—è –∑–∞–¥–∞—á–∏, –¥–æ–±–∞–≤–∏–≤ '--' –∏ –¥–∞—Ç—É/–≤—Ä–µ–º—è:\n"
        "–ü—Ä–∏–º–µ—Ä: '–ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ --–∑–∞–≤—Ç—Ä–∞ 20:00'"
    )

    await update.message.reply_text(help_text, parse_mode="Markdown")


async def send_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PDF-—Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    try:
        # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É PDF-—Ñ–∞–π–ª—É
        pdf_path = "./SQL.pdf"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(pdf_path):
            await update.message.reply_text("‚ùå PDF-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await update.message.reply_document(
            document=open(pdf_path, 'rb'),
            caption="–í–æ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π PDF-—Ñ–∞–π–ª üìÑ"
        )
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")

async def send_pdf_python(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PDF-—Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    try:
        # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É PDF-—Ñ–∞–π–ª—É
        pdf_path = "./pythonworldru.pdf"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(pdf_path):
            await update.message.reply_text("‚ùå PDF-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await update.message.reply_document(
            document=open(pdf_path, 'rb'),
            caption="–í–æ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π PDF-—Ñ–∞–π–ª üìÑ"
        )
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")

# ===== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ =====
def main():
    app = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("add", add_task))
    app.add_handler(CommandHandler("list", list_tasks))
    app.add_handler(CommandHandler("weather", get_weather))
    app.add_handler(CommandHandler("sql", send_pdf))
    app.add_handler(CommandHandler("python", send_pdf_python))
    app.add_handler(CallbackQueryHandler(button_handler))

    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! üöÄ")
    app.run_polling()


if __name__ == "__main__":
    main()
